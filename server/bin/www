#!/usr/bin/env node

const http = require("http")
const app  = require("../app")

const port = normalizePort(process.env.PORT || "8000")
app.set("port", port)

const env = process.env.NODE_ENV || "development"
app.set("env", env)

const server = http.createServer(app)
server.listen(port)
server.on("error", onError)
server.on("listening", onListening)

function normalizePort(val) {
    const _port = parseInt(val, 10)

    if (isNaN(_port)) return val
    if (_port >= 0) return _port

    return false
}

function onError(error) {
    if (error.syscall !== "listen") throw error

    const bind = typeof port === "string"
        ? `Pipe ${port}`
        : `Port ${port}`

    switch (error.code) {
        case "EACCES":
            console.error(`${bind} requires elevated privileges`) // eslint-disable-line
            process.exit(1)
            break
        case "EADDRINUSE":
            console.error(`${bind} is already in use`) // eslint-disable-line
            process.exit(1)
            break
        default:
            throw error
    }
}

function onListening() {
    const addr = server.address()
    const bind = typeof addr === "string"
        ? `pipe ${addr}`
        : `port ${addr.port}`
    console.log(`Listening on ${bind}`) // eslint-disable-line no-console
}
